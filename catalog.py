import sqlite3
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import CallbackQueryHandler, CommandHandler, ContextTypes

DB_PATH = "products.db"

# –ö–æ–º–∞–Ω–¥–∞ /catalog ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ food_type)
async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    categories = get_unique_values("food_type")
    context.user_data["categories"] = categories  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫

    keyboard = [
        [InlineKeyboardButton(cat, callback_data=f"category:{i}")]
        for i, cat in enumerate(categories)
    ]

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (animal)
async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    index = int(query.data.split(":")[1])
    category = context.user_data["categories"][index]
    context.user_data["selected_category"] = category

    subcategories = get_unique_values("animal", "food_type", category)
    context.user_data["subcategories"] = subcategories

    keyboard = [
        [InlineKeyboardButton(subcat, callback_data=f"subcategory:{i}")]
        for i, subcat in enumerate(subcategories)
    ]

    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: *{category}*\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
async def handle_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    index = int(query.data.split(":")[1])
    subcategory = context.user_data["subcategories"][index]
    category = context.user_data["selected_category"]

    products = get_products(category, subcategory)

    if not products:
        await query.edit_message_text("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    for product in products:
        brand = product["brand"]
        variant = product["variant"]
        price = product["price"]

        text = f"*{brand}*\n–§–∞—Å–æ–≤–∫–∞: {variant}\n–¶–µ–Ω–∞: {price} ‚ÇΩ"
        button = InlineKeyboardMarkup([
            [InlineKeyboardButton("üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart:{brand}")]
        ])

        await query.message.reply_text(text, reply_markup=button, parse_mode="Markdown")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_unique_values(column: str, where_column=None, where_value=None):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    if where_column and where_value:
        cursor.execute(f"SELECT DISTINCT {column} FROM products WHERE {where_column} = ?", (where_value,))
    else:
        cursor.execute(f"SELECT DISTINCT {column} FROM products")

    rows = cursor.fetchall()
    conn.close()
    return [row[0] for row in rows]

def get_products(category: str, subcategory: str):
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    cursor.execute(
        "SELECT * FROM products WHERE food_type = ? AND animal = ?",
        (category, subcategory)
    )
    rows = cursor.fetchall()
    conn.close()
    return rows

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_catalog_handlers(app):
    app.add_handler(CommandHandler("catalog", catalog_command))
    app.add_handler(CallbackQueryHandler(handle_category, pattern=r"^category:"))
    app.add_handler(CallbackQueryHandler(handle_subcategory, pattern=r"^subcategory:"))
